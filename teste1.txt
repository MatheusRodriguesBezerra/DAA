bibliotecas padrão 
    #include <iostream>
    #include <vector>
    #include <list>
    #include <algorithm>
    using namespace std;

ordenação
    com <list>:
        declarar:   vector<pair<int, float>> NomeDaLista(n);
        ordenar:    sort(Sapatos.begin(), Sapatos.end(), compare);
    com Lista normal:
        declarar como uma lisa normal
        ordenar:    sort(somas, somas + a);


countingSort(Contar numero de elementos de cada ”tamanho”):
    conta[maxTamanho] = array para contagem
    Para i = 0 até n−1 fazer
        conta[v[i]]++ (mais um elemento v[i])
    i = 0
    Para j = minTamanho até maxTamanho fazer
        Enquanto conta[j] > 0 fazer
            v[i] = j (coloca elemento no array)
            conta[j]−− (menos um elemento desse tamanho)
            i++ (incrementa posic¸˜ao a colocar no array)


Pesquisa binária para condição
    bsearch(low, high, condicao):
        Enquanto (low < high ) fazer:
            middle = low + (high − low)/2
            Se (condicao(middle) = sim) high = middle
            Senao: low = middle + 1
        Se (condicao(low) = nao) retorna(-1)
        retorna(low)



Pesquisa binária num array ordenado
    bsearch(v, low, high, key)
        Enquanto (low ≤ high ) fazer
            middle = low + (high − low)/2
            if (key = v[middle]) retorna(middle)
            elif (key < v[middle]) high = middle − 1
            else = middle + 1
    retorna(-1)

greedy(Fractional Knapsack):
    1.Ordenar materiais por ordem decrescente de rácio valor/peso
    2.Processar o próximo material na lista ordenada:
        -Se o elemento couber na totalidade na mochila, incluir todo e
        continuar para o próximo material
        -Se o elemento não couber na totalidade na mochila, incluir o máximo
        possível e terminar


greedy(Interval Scheduling):
    1.Ordenar actividades por ordem crescente de tempo de finalização
    2.Começar por iniciar G = 0
    3.Ir adicionando a G a próxima actividade da lista (com menor fi,
        portanto) que não esteja sobreposta com nenhuma actividade de G

greedy(cobertura mínima):
    1.Ordenar actividades por ordem crescente do seu início (li).
    2.Começar por iniciar end = 0 (sendo que vamos sempre tendo coberto
        o segmento [0, end])
    3.Processar na lista todos os segmentos que têm início pelo menos em
        end (li ≤ end), e escolher destes o que termina depois (maior ri).
    4.Actualizar end para o sítio onde termina o segmento escolhido e
        repetir o passo anterior até que end ≥ M


matriz triangular inferior:
    int matriz[n][n];

    for (int i = 0; i < n; i++):
        for (int j = 0; j < n; j++):
            if (j > i):
                matriz[i][j] = 0;
            else:
                matriz[i][j] = 1;

    // Imprime a matriz triangular inferior gerada
    cout << "Matriz triangular inferior gerada:" << endl;
    for (int i = 0; i < n; i++):
        for (int j = 0; j < n; j++):
            cout << matriz[i][j] << " ";
        cout << endl;






